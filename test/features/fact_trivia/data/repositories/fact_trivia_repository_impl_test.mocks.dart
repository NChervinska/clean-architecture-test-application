// Mocks generated by Mockito 5.4.0 from annotations
// in test_application/test/features/fact_trivia/data/repositories/fact_trivia_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:test_application/core/network/network_info.dart' as _i6;
import 'package:test_application/features/fact_trivia/data/datasources/fact_trivia_local_data_source.dart'
    as _i5;
import 'package:test_application/features/fact_trivia/data/datasources/fact_trivia_remote_data_source.dart'
    as _i3;
import 'package:test_application/features/fact_trivia/data/models/fact_trivia_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFactTriviaModel_0 extends _i1.SmartFake
    implements _i2.FactTriviaModel {
  _FakeFactTriviaModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FactTriviaRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFactTriviaRemoteDataSource extends _i1.Mock
    implements _i3.FactTriviaRemoteDataSource {
  MockFactTriviaRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.FactTriviaModel> getFactTrivia() => (super.noSuchMethod(
        Invocation.method(
          #getFactTrivia,
          [],
        ),
        returnValue:
            _i4.Future<_i2.FactTriviaModel>.value(_FakeFactTriviaModel_0(
          this,
          Invocation.method(
            #getFactTrivia,
            [],
          ),
        )),
      ) as _i4.Future<_i2.FactTriviaModel>);
}

/// A class which mocks [FactTriviaLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFactTriviaLocalDataSource extends _i1.Mock
    implements _i5.FactTriviaLocalDataSource {
  MockFactTriviaLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.FactTriviaModel> getCacheFactTrivia() => (super.noSuchMethod(
        Invocation.method(
          #getCacheFactTrivia,
          [],
        ),
        returnValue:
            _i4.Future<_i2.FactTriviaModel>.value(_FakeFactTriviaModel_0(
          this,
          Invocation.method(
            #getCacheFactTrivia,
            [],
          ),
        )),
      ) as _i4.Future<_i2.FactTriviaModel>);
  @override
  _i4.Future<void> cacheFactTrivia(_i2.FactTriviaModel? factTrivia) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheFactTrivia,
          [factTrivia],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get connected => (super.noSuchMethod(
        Invocation.getter(#connected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
